%% Nerve EEG for Guitar. June 2017

clear all;
close all;
clc;

cd('C:\Users\Thomas\Documents\MATLAB\SMC8tk2\SMC8SEM_PROJECT\0905_NEEG_DATA');

%% Load data

% load('NEEG090517_dummy.mat');
% dummy=y(2:end,4800:end-4800);
% load('NEEG090517_faststrum.mat');
% fast_strum=y(2:end,4800:end-4800);
% load('NEEG090517_LoudSlow2.mat');
% slow_loud_strum2=y(2:end,4800:end-4800);
load('NEEG090517_loudslowstrum.mat'); %Video DSC_0025
slow_loud_strum=y(2:end,4800:end-4800);
% load('NEEG090517_picking.mat');
% picking=y(2:end,4800:end-4800);
% load('NEEG090517_pickingFastLoud.mat');
% fast_loud_picking=y(2:end,4800:end-4800);
% load('NEEG090517_pickingQuiteSlow.mat');
% slow_picking=y(2:end,4800:end-4800);
% load('NEEG090517_slowstrum.mat');
% slow_strum=y(2:end,4800:end-4800);

%Clear unnecessary variables from workspace)
clear('y');

%% Center data
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);
idx_var=0;
for idx_var=0:work_L-1
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        curr_var2(idx_chan,:)=(curr_var(idx_chan,:)-mean(curr_var(idx_chan,:))); %Correct drift voltage
        clear('idx_low','idx_high','idx_sig');
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var2);
    clear('curr_var2')
end
clear( 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx',...
    'chan_L', 'idx_sig', 'idx_spike', 'var_L',...
    'idx_high','idx_low','curr_data');

%% Apply bandpass and comb filter

% Index Wanted Variables
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);

% Design bandpass
d_bp1 = fdesign.bandpass('N,Fp1,Fp2,Ap', 60, 118, 800, 0.5, 4800);
%high pass (above resting heart rate), low pass above action potential maximum freq
h_bp1 = design(d_bp1, 'cheby1');

% View filter z_magnitude response
%fvtool(h_bp1);

% Design Comb Filter
d_comb=fdesign.comb('notch','L,BW,GBW,Nsh',(96*1),5,-2,2,4800);
h_comb=design(d_comb);
%fvtool(h_comb);

% Apply Filters
idx_var=0;
for idx_var=0:work_L-1
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        curr_var(idx_chan,:)=filter(h_bp1,(curr_var(idx_chan,:)));
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        curr_var(idx_chan,:)=filter(h_comb,curr_var(idx_chan,:));
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var);
end
clear( 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx',...
    'd_bp1', 'h_bp1','h_comb', 'd_comb');


%% Center data
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);
idx_var=0;
for idx_var=0:work_L-1
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        curr_var2(idx_chan,:)=(curr_var(idx_chan,:)-mean(curr_var(idx_chan,:))); %Correct drift voltage
        clear('idx_low','idx_high','idx_sig');
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var2);
    clear('curr_var2')
end
clear( 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx',...
    'chan_L', 'idx_sig', 'idx_spike', 'var_L',...
    'idx_high','idx_low','curr_data');

%% Apply limiter
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);
idx_var=0;
for idx_var=0:work_L-1
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
         curr_var2(idx_chan,:)=(curr_var(idx_chan,:)); %Double sample frequency from 4800 to fs
        clear('idx_low','idx_high','idx_sig');
        idx_high=find((curr_var2(idx_chan,:)) >280*2);
        curr_var2(idx_chan,idx_high)=290*ones(size(curr_var2(idx_chan,idx_high)));%Limit positive
        idx_low=find((curr_var2(idx_chan,:)) <-280*2);
        curr_var2(idx_chan,idx_low)=-290*ones(size(curr_var2(idx_chan,idx_low)));%Limit negative
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var2);
    clear('curr_var2')
end
clear( 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx',...
    'chan_L', 'idx_sig', 'idx_spike', 'var_L',...
    'idx_high','idx_low','curr_data');

%% Apply compressor
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);

knee=0.75; %1=limiter 0=no compression
idx_var=0;
for idx_var=0:work_L-1
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        curr_var2(idx_chan,:)=(curr_var(idx_chan,:));
        idx_high=find((curr_var2(idx_chan,:)) >280);
        idx_sig=0;
        for idx_sig=0:length(idx_high)-1;
            idx_sig=idx_sig+1;
        comp_ratio_high(idx_sig)=(((abs(curr_var2(idx_chan,idx_sig))/140)-1)*knee)+1;
        curr_var2(idx_chan,idx_sig)=((curr_var2(idx_chan,idx_sig))/comp_ratio_high(idx_sig));%Compres positive
        end
        clear('comp_ratio_high','idx_sig');
        idx_low=find((curr_var2(idx_chan,:)) <-280);
         idx_sig=0;
        for idx_sig=0:length(idx_low)-1;
            idx_sig=idx_sig+1;
            comp_ratio_low(idx_sig)=(((abs(curr_var2(idx_chan,idx_sig))/140)-1)*knee)+1;
        curr_var2(idx_chan,idx_sig)=((curr_var2(idx_chan,idx_sig))/comp_ratio_low(idx_sig));%Compress negative
        end
        clear('comp_ratio_low');
        clear('idx_low','idx_high','idx_sig');
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var2);
    clear('curr_var2')
end
clear('knee', 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx',...
    'chan_L', 'idx_sig', 'idx_spike', 'var_L',...
    'idx_high','idx_low','curr_data');

%% Smooth/resample data and apply limiter
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);
idx_var=0;
for idx_var=0:work_L-1
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        curr_var2(idx_chan,:)=interp(curr_var(idx_chan,:),10); %Increase sample frequency from 4800 to 48000
        clear('idx_low','idx_high','idx_sig');
        idx_high=find((curr_var2(idx_chan,:)) >280);
        curr_var2(idx_chan,idx_high)=290*ones(size(curr_var2(idx_chan,idx_high)));%Limit positive
        idx_low=find((curr_var2(idx_chan,:)) <-280);
        curr_var2(idx_chan,idx_low)=-290*ones(size(curr_var2(idx_chan,idx_low)));%Limit negative
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var2);
    clear('curr_var2')
end
clear( 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx',...
    'chan_L', 'idx_sig', 'idx_spike', 'var_L',...
    'idx_high','idx_low','curr_data');

zfs=48000; %sample freq

%% Isolate stable areas

slow_loud_strum(:,[175*48000:end 1:105*48000])=[];

%% Remove Drift offset (mains/electrode/movement etc)
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);
idx_var=0;
for idx_var=0:work_L-2
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        [z_peaks{idx_var,idx_chan},z_peak_loc{idx_var,idx_chan}]=findpeaks(curr_var(idx_chan,:)); %peaks and their locations
        [z_troughs{idx_var,idx_chan},z_troughs_loc{idx_var,idx_chan}]=findpeaks((curr_var(idx_chan,:))*-1); %troughs and their locations
        z_troughs{idx_var,idx_chan}=z_troughs{idx_var,idx_chan}*-1;
        idx_sig=0;
        z_line=zeros(size(curr_var(idx_chan,:)));
        for idx_sig=0:length(z_troughs{idx_var,idx_chan})-2
            idx_sig=idx_sig+1;
            z_line(1,[z_troughs_loc{idx_var,idx_chan}(idx_sig):z_troughs_loc{idx_var,...
                idx_chan}(idx_sig+1)])=linspace(z_troughs{idx_var,idx_chan}(idx_sig),...
                z_troughs{idx_var,idx_chan}(idx_sig+1),diff([z_troughs_loc{idx_var,...
                idx_chan}(idx_sig);z_troughs_loc{idx_var,idx_chan}(idx_sig+1)+1])); %creates line between two troughs
        end
        clear('idx_sig')
        z_troughline{idx_var,idx_chan}=z_line(1,:);
        clear('z_line');
%         idx_sig=0;
%         z_line=zeros(size(curr_var(idx_chan,:)));
%         for idx_sig=0:length(z_peaks{idx_var,idx_chan})-2
%             idx_sig=idx_sig+1;
%             z_line(1,[z_peak_loc{idx_var,idx_chan}(idx_sig):z_peak_loc{idx_var,...
%                 idx_chan}(idx_sig+1)])=linspace(z_peaks{idx_var,idx_chan}(idx_sig),...
%                 z_peaks{idx_var,idx_chan}(idx_sig+1),diff([z_peak_loc{idx_var,...
%                 idx_chan}(idx_sig);z_peak_loc{idx_var,idx_chan}(idx_sig+1)+1])); %creates line between two peaks
%         end
%         clear('idx_sig')
%         z_peakline{idx_var,idx_chan}=z_line(1,:);
%         clear('z_line');
     end
    idx_chan=0;
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        curr_var2(idx_chan,:)=curr_var(idx_chan,:)-z_troughline{idx_var,idx_chan}; %Remove drift offset
        clear('idx_low','idx_high','idx_sig');
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var2);
    clear('curr_var2')
end
clear( 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx');
clear('z_peak_loc', 'z_peaks', 'z_troughline', 'z_troughs',...
'z_troughs_loc');

%% Normalise All Channels

slow_loud_strum=slow_loud_strum./max(slow_loud_strum')'; %Normalise all channels

%% Apply compressor
% worksp_idx= evalin('base','whos');
% [work_L ~]=size(worksp_idx);
% 
% knee=0.75; %1=limiter 0=no compression
% idx_var=0;
% for idx_var=0:work_L-1
%     idx_var=idx_var+1;
%     name_var=(worksp_idx(idx_var).name);
%     curr_var=eval(name_var);
%     idx_chan=0;
%     [curr_var_L ~]=size(curr_var);
%     for idx_chan=0:curr_var_L-1;
%         idx_chan=idx_chan+1;
%         curr_var2(idx_chan,:)=(curr_var(idx_chan,:));
%         idx_high=find((curr_var2(idx_chan,:)) >140);
%         idx_sig=0;
%         for idx_sig=0:length(idx_high)-1;
%             idx_sig=idx_sig+1;
%         comp_ratio_high(idx_sig)=(((abs(curr_var2(idx_chan,idx_sig))/140)-1)*knee)+1;
%         curr_var2(idx_chan,idx_sig)=((curr_var2(idx_chan,idx_sig))/comp_ratio_high(idx_sig));%Compres positive
%         end
%         clear('comp_ratio_high','idx_sig');
%     end
%     assignin('base' , (worksp_idx(idx_var).name) , curr_var2);
%     clear('curr_var2')
% end
% clear('knee', 'curr_var', 'curr_var_L', 'idx_chan',...
%     'idx_var', 'name_var', 'work_L', 'worksp_idx',...
%     'chan_L', 'idx_sig', 'idx_spike', 'var_L',...
%     'idx_high','idx_low','curr_data');
%% Measure pulse widths (pw) and their onsets and offsets
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);
idx_var=0;
for idx_var=0:work_L-2
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [curr_var_L ~]=size(curr_var);
    for idx_chan=0:curr_var_L-1;
        idx_chan=idx_chan+1;
        [zpw{idx_var,idx_chan},zINITCROSS{idx_var,idx_chan},...
            zFINALCROSS{idx_var,idx_chan}]=pulsewidth(curr_var(idx_chan,:),...
            zfs,'StateLevels',[0.02 0.021]);
        %figure()
        %pulsewidth(curr_var(idx_chan,:),fs,'StateLevels',[-71 -69]);
    end
    assignin('base' , (worksp_idx(idx_var).name) , curr_var);
end
clear( 'curr_var', 'curr_var_L', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx');
%% Create cell of pulsewidths with indices for onsets and offsets
idx_var=0;
[var_L chan_L]=size(zpw);
for idx_var=0:var_L-1
    idx_var=idx_var+1;
    idx_sig=0;
    for idx_sig=0:chan_L-1;
        idx_sig=idx_sig+1;
        spikecell{idx_var,idx_sig}=[round(zpw{idx_var,idx_sig},...
            3,'significant');round(zINITCROSS{idx_var,idx_sig},6,...
            'significant');round(zFINALCROSS{idx_var,idx_sig},6,'significant')];
    end
end
clear('idx_sig', 'idx_var', 'var_B','chan_L','idx_high',...
    'idx_low','zFINALCROSS', 'zINITCROSS', 'zpw','var_L');

%% Add peak amplitude and total rise to cell of spikes
worksp_idx= evalin('base','whos');
[work_L ~]=size(worksp_idx);
idx_var=0;
for idx_var=0:work_L-3
    idx_var=idx_var+1;
    name_var=(worksp_idx(idx_var).name);
    curr_var=eval(name_var);
    idx_chan=0;
    [var_B var_L]=size(spikecell);
    for idx_chan=0:var_L-1
        idx_chan=idx_chan+1;
        curr_data=curr_var(idx_chan,:);
        chan_L=length(spikecell{idx_var,idx_chan});
        idx_sig=0;
        for idx_sig=0:chan_L-1;
            idx_sig=idx_sig+1;
            spikecell{idx_var,idx_chan}(4,idx_sig)=max((curr_data(1,floor(spikecell{idx_var,idx_chan}(2,...
                idx_sig)*zfs):ceil(spikecell{idx_var,idx_chan}(3,idx_sig)*zfs))));
            clear('idx_peak')
            idx_peak=find((curr_data(1,floor(spikecell{idx_var,idx_chan}(2,...
                idx_sig)*zfs):ceil(spikecell{idx_var,idx_chan}(3,idx_sig)*zfs)))==spikecell{idx_var,idx_chan}(4,idx_sig));
            spikecell{idx_var,idx_chan}(5,idx_sig)=idx_peak/zfs;
        end
        %spikecell{idx_var,idx_chan}(4,:)=spikecell{idx_var,idx_chan}(4,:)/max(spikecell{idx_var,idx_chan}(4,:)); %Normalise amplitude
       %spikecell{idx_var,idx_chan}(5,:)=spikecell{idx_var,idx_chan}(5,:)/max(spikecell{idx_var,idx_chan}(5,:));%Normalise rise
        %spikecell{idx_var,idx_chan}(4,:)=round(spikecell{idx_var,idx_chan}(4,:)/0.01)*0.01;
    end
end
clear( 'curr_var', 'curr_var_L', 'curr_var_B', 'idx_chan',...
    'idx_var', 'name_var', 'work_L', 'worksp_idx','var_B',...
    'chan_L', 'idx_sig', 'idx_spike', 'var_L','curr_data','idx_peak');

%% Remove spikes with negative peaks 
idx_var=0;
[var_L chan_L]=size(spikecell);
for idx_var=0:var_L-1
    idx_var=idx_var+1;
    idx_sig=0;
    for idx_sig=0:chan_L-1;
        idx_sig=idx_sig+1;
        idx_noise=find(spikecell{idx_var,idx_sig}(4,:) <0);
        spikecell{idx_var,idx_sig}(:,idx_noise)=[];
        clear('idx_noise','idx_low')
         idx_noise=find(spikecell{idx_var,idx_sig}(4,:) ==0);
         spikecell{idx_var,idx_sig}(:,idx_noise)=[];
         clear('idx_noise','idx_low')
    end
end
clear('idx_sig', 'idx_var', 'var_L','chan_L','idx_high','idx_low');

%% Remove spikes outside pulsewidth limits
idx_var=0;
[var_L chan_L]=size(spikecell);
for idx_var=0:var_L-1
    idx_var=idx_var+1;
    idx_sig=0;
    for idx_sig=0:chan_L-1;
        idx_sig=idx_sig+1;
        idx_noise=find(spikecell{idx_var,idx_sig}(1,:)<0.7*10.^-3); %minimum pulse width
        spikecell{idx_var,idx_sig}(:,idx_noise)=[];
        clear('idx_noise')
        idx_noise=find(spikecell{idx_var,idx_sig}(1,:)>5.05*10.^-3); %maximum pulsewidth (two superimspoed)
        spikecell{idx_var,idx_sig}(:,idx_noise)=[];
        clear('idx_noise','idx_low')
%         idx_noise=find(spikecell{idx_var,idx_sig}(4,:)>(3*110)); % maximum voltage in mV of two superimposed spikes plus drift
%         spikecell{idx_var,idx_sig}(:,idx_noise)=[];
%         clear('idx_noise')
%         idx_noise=find(spikecell{idx_var,idx_sig}(4,:)<54); % minimum voltage in mV of spike
%         spikecell{idx_var,idx_sig}(:,idx_noise)=[];
%         clear('idx_noise')
%         idx_noise=find((abs(spikecell{idx_var,idx_sig}(5,:)))<54); % minimum rise voltage in mV of spike
%         spikecell{idx_var,idx_sig}(:,idx_noise)=[];
%         clear('idx_noise')
%         idx_noise=find((abs(spikecell{idx_var,idx_sig}(5,:)))>(110*3)); % maximum rise voltage in mV of spike
%         spikecell{idx_var,idx_sig}(:,idx_noise)=[];
%         clear('idx_noise')
    end
end
clear('idx_sig','idx_noise', 'idx_var', 'var_L','chan_L','idx_high','idx_low');

%% Label Action Potentials (less than 2.01ms) and overlapped Motor Action Potentials (greater than 2.01ms)
idx_var=0;
[var_L chan_L]=size(spikecell);
for idx_var=0:var_L-1
    idx_var=idx_var+1;
    idx_sig=0;
    for idx_sig=0:chan_L-1;
        idx_sig=idx_sig+1;
        idx_ap=find(spikecell{idx_var,idx_sig}(1,:) <2.01*10.^-3);
        spikecell{idx_var,idx_sig}(6,idx_ap)=1;
        idx_cmap=find(spikecell{idx_var,idx_sig}(1,:) >2.01*10.^-3);
        spikecell{idx_var,idx_sig}(6,idx_cmap)=2;
        clear('idx_ap','idx_cmap')
     spikecell{idx_var,idx_sig}(4,:)=spikecell{idx_var,idx_sig}(4,:)/max(spikecell{idx_var,idx_sig}(4,:)); %Normalise amplitude
     spikecell{idx_var,idx_sig}(5,:)=spikecell{idx_var,idx_sig}(5,:)/max(spikecell{idx_var,idx_sig}(5,:)); %Normalise rise
    end
    end
clear('idx_sig', 'idx_var', 'var_L','chan_L','idx_high','idx_low');


%% Label Action Potentials by Muscle movements phase
% idx_var=0;
% [var_L chan_L]=size(spikecell);
% for idx_var=0:var_L-1
%     idx_var=idx_var+1;
%     idx_sig=0;
%     for idx_sig=0:chan_L-1;
%         idx_sig=idx_sig+1;
%         idx_ap=find(spikecell{idx_var,idx_sig}(1,:) <2.01*10.^-3);
%         spikecell{idx_var,idx_sig}(7,idx_ap)=1;
%         idx_cmap=find(spikecell{idx_var,idx_sig}(1,:) >2.01*10.^-3);
%         spikecell{idx_var,idx_sig}(8,idx_cmap)=2;
%         clear('idx_ap','idx_cmap')
%     end
% end
% clear('idx_sig', 'idx_var', 'var_L','chan_L','idx_high','idx_low');
% 
%% Phase coding plot
% % centered data from electrode pairs red and blue
% plot((1:(length(fast_loud_picking(1,:))))/zfs,(envelope(diff([abs(fast_loud_picking(8,...
%     :));abs(fast_loud_picking(9,:))]),400,'rms')),'b','lineWidth',1.1)
% hold on;
% plot((1:(length(fast_loud_picking(1,:))))/zfs,(envelope(diff([abs(fast_loud_picking(6,...
%     :));abs(fast_loud_picking(7,:))]),400,'rms')),'r','lineWidth',1.1)
% hold on;
% % hand location= median of blue and inversed red (note their variance (gain) has been normalised)
% plot((1:(length(fast_loud_picking(1,:))))/zfs,median([-1*(envelope(diff([abs(fast_loud_picking(6,...
%     :));abs(fast_loud_picking(7,:))]),400,'rms'));(envelope(diff([abs(fast_loud_picking(8,...
%     :));abs(fast_loud_picking(9,:))]),400,'rms'))]),'k','lineWidth',1.1)
% grid minor
% 
%% Plot Isolated Spikes
% ai1=find((spikecell{2,1}(6,:))==1);
% ti1=spikecell{2,1}(2,ai1);
% ti1=floor(ti1*zfs);
% ti1e=spikecell{2,1}(3,ai1);
% ti1e=ceil(ti1e*zfs);
% cm=round(spikecell{2,1}(1,ai1)/max(spikecell{2,1}(1,ai1)),2);
% cm=[cm;cm;cm];
% ind=0;
% xi1mx=0;
% for ind=0:length(ti1)-1
%     ind=ind+1;
%     xi1{ind}=fast_loud_picking(1,ti1(ind)-5:ti1e(ind)+5);hold on;
%     if max(xi1{ind})>xi1mx;
%         xi1mx=max(xi1{ind});
%     else
%     end
% end
% clear('ind');
% plot([xi1{1,:}]);
% ind=0;
% for ind=0:20
%      ind=ind+1;
% %     plot3(ones(length(xi1{ind}))*spikecell{8,1}(1,ai1(ind)),...
% %         (max(xi1{ind})/xi1mx)+(1:length(xi1{ind}))/length(xi1{ind}),...
% %         xi1{ind},'color',cm(:,ind)); hold on;
% %     pause(0.01)
%         plot3(ones(length(xi1{ind}))*spikecell{2,1}(5,ai1(ind)),...
%         (max(xi1{ind})/xi1mx)+(1:length(xi1{ind}))/length(xi1{ind}),...
%         xi1{ind}); hold on;
%     pause(0.01)
% end
%  clear('ind');
% 
%% Plot overlapping spikes
% ai2=find((spikecell{2,1}(6,:))==2);
% ti2=spikecell{2,1}(2,ai2);
% ti2=floor(ti2*zfs);
% ti2e=spikecell{2,1}(3,ai2);
% ti2e=ceil(ti2e*zfs);
% cm2=round(spikecell{2,1}(1,ai2)/max(spikecell{2,1}(1,ai2)),2);
% cm2=[cm2;cm2;cm2];
% ind=0;
% xi2mx=0;
% for ind=0:length(ti2)-1
%     ind=ind+1;
%     xi2{ind}=fast_loud_picking(1,ti2(ind)-5:ti2e(ind)+5);hold on;
%     if max(xi2{ind})>xi2mx;
%         xi2mx=max(xi2{ind});
%     else
%     end
% end
% clear('ind');
% plot([xi2{1,:}]);
% ind=0;
% for ind=0:100
%     ind=ind+1;
%     plot3(ones(length(xi2{ind}))*spikecell{2,1}(4,ai2(ind)),...
%         (min(xi2{ind})/xi2mx)+(1:length(xi2{ind}))/length(xi2{ind}),...
%         xi2{ind},'color',cm2(:,ind)); hold on;
%     pause(0.001)
% end